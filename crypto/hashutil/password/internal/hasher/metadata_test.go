package hasher

import (
	"io"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestMetadata_Pack(t *testing.T) {
	t.Parallel()

	type fields struct {
		Algorithm uint8
		Version   uint8
		Salt      []byte
		Hash      []byte
	}
	tests := []struct {
		name    string
		fields  fields
		want    string
		wantErr bool
	}{
		{
			name: "PBKDF2 - V1",
			fields: fields{
				Algorithm: uint8(Pbkdf2HmacSha512),
				Version:   1,
				Salt:      []byte(`GsdYAMk@Lg5#\'uivVh)?</[ndjk%zv5`),
				Hash: []byte{
					0xb9, 0xb0, 0x42, 0xaf, 0x74, 0xa2, 0xb6, 0x53, 0xcc, 0x67, 0xfa, 0x09, 0x2b, 0x87, 0x58, 0xf3,
					0xd9, 0xfa, 0x8a, 0xea, 0xd3, 0xb0, 0x01, 0xbb, 0x25, 0xcb, 0x72, 0xd4, 0x6e, 0x6f, 0x27, 0xc5,
					0xb0, 0x29, 0x65, 0x4b, 0xb8, 0x47, 0xe6, 0x89, 0xa6, 0x42, 0x5b, 0xfe, 0xc1, 0x57, 0x6c, 0x2e,
					0x2a, 0x69, 0x6f, 0x2b, 0x49, 0x16, 0x65, 0x9c, 0x04, 0xe9, 0xbf, 0xa6, 0x33, 0xf1, 0x72, 0xd7,
				},
			},
			wantErr: false,
			want:    "hAIBWCBHc2RZQU1rQExnNSNcJ3VpdlZoKT88L1tuZGprJXp2NVhAubBCr3SitlPMZ/oJK4dY89n6iurTsAG7Jcty1G5vJ8WwKWVLuEfmiaZCW/7BV2wuKmlvK0kWZZwE6b+mM/Fy1w",
		},
		{
			name: "Argon2id - V1",
			fields: fields{
				Algorithm: uint8(Argon2id),
				Version:   1,
				Salt:      []byte(`GsdYAMk@Lg5#\'uivVh)?</[ndjk%zv5`),
				Hash: []byte{
					0xc9, 0x9e, 0x41, 0x44, 0x03, 0x99, 0x78, 0x71, 0x65, 0xc0, 0x34, 0x2b, 0x0e, 0x1a, 0xa5, 0x2f,
					0x3f, 0x35, 0xe2, 0x79, 0xe9, 0x3e, 0x93, 0x53, 0x0f, 0xf5, 0x42, 0xf3, 0x71, 0xac, 0xe6, 0xd3,
					0x97, 0x5b, 0x05, 0x6a, 0x55, 0x0a, 0x0c, 0xf1, 0x4f, 0xf8, 0x4a, 0xa5, 0x1b, 0xbe, 0x2e, 0x8c,
					0x88, 0x12, 0x9a, 0x50, 0x3f, 0x66, 0xca, 0x7b, 0x30, 0x29, 0x53, 0x8d, 0x90, 0x8b, 0x7a, 0xd1,
				},
			},
			wantErr: false,
			want:    "hAEBWCBHc2RZQU1rQExnNSNcJ3VpdlZoKT88L1tuZGprJXp2NVhAyZ5BRAOZeHFlwDQrDhqlLz814nnpPpNTD/VC83Gs5tOXWwVqVQoM8U/4SqUbvi6MiBKaUD9mynswKVONkIt60Q",
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			m := &Metadata{
				Algorithm: tt.fields.Algorithm,
				Version:   tt.fields.Version,
				Salt:      tt.fields.Salt,
				Hash:      tt.fields.Hash,
			}
			got, err := m.Pack()
			if (err != nil) != tt.wantErr {
				t.Errorf("Metadata.Pack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("Metadata.Pack() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestDecode(t *testing.T) {
	t.Parallel()

	type args struct {
		r io.Reader
	}
	tests := []struct {
		name    string
		args    args
		want    *Metadata
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "valid - PBKDF2 - v1",
			args: args{
				r: strings.NewReader("hAIBWCBHc2RZQU1rQExnNSNcJ3VpdlZoKT88L1tuZGprJXp2NVhAubBCr3SitlPMZ/oJK4dY89n6iurTsAG7Jcty1G5vJ8WwKWVLuEfmiaZCW/7BV2wuKmlvK0kWZZwE6b+mM/Fy1w"),
			},
			wantErr: false,
			want: &Metadata{
				Algorithm: uint8(Pbkdf2HmacSha512),
				Version:   1,
				Salt:      []byte(`GsdYAMk@Lg5#\'uivVh)?</[ndjk%zv5`),
				Hash: []byte{
					0xb9, 0xb0, 0x42, 0xaf, 0x74, 0xa2, 0xb6, 0x53, 0xcc, 0x67, 0xfa, 0x09, 0x2b, 0x87, 0x58, 0xf3,
					0xd9, 0xfa, 0x8a, 0xea, 0xd3, 0xb0, 0x01, 0xbb, 0x25, 0xcb, 0x72, 0xd4, 0x6e, 0x6f, 0x27, 0xc5,
					0xb0, 0x29, 0x65, 0x4b, 0xb8, 0x47, 0xe6, 0x89, 0xa6, 0x42, 0x5b, 0xfe, 0xc1, 0x57, 0x6c, 0x2e,
					0x2a, 0x69, 0x6f, 0x2b, 0x49, 0x16, 0x65, 0x9c, 0x04, 0xe9, 0xbf, 0xa6, 0x33, 0xf1, 0x72, 0xd7,
				},
			},
		},
		{
			name: "valid - Argon2 - v1",
			args: args{
				r: strings.NewReader("hAEBWCBHc2RZQU1rQExnNSNcJ3VpdlZoKT88L1tuZGprJXp2NVhAyZ5BRAOZeHFlwDQrDhqlLz814nnpPpNTD/VC83Gs5tOXWwVqVQoM8U/4SqUbvi6MiBKaUD9mynswKVONkIt60Q"),
			},
			wantErr: false,
			want: &Metadata{
				Algorithm: uint8(Argon2id),
				Version:   1,
				Salt:      []byte(`GsdYAMk@Lg5#\'uivVh)?</[ndjk%zv5`),
				Hash: []byte{
					0xc9, 0x9e, 0x41, 0x44, 0x03, 0x99, 0x78, 0x71, 0x65, 0xc0, 0x34, 0x2b, 0x0e, 0x1a, 0xa5, 0x2f,
					0x3f, 0x35, 0xe2, 0x79, 0xe9, 0x3e, 0x93, 0x53, 0x0f, 0xf5, 0x42, 0xf3, 0x71, 0xac, 0xe6, 0xd3,
					0x97, 0x5b, 0x05, 0x6a, 0x55, 0x0a, 0x0c, 0xf1, 0x4f, 0xf8, 0x4a, 0xa5, 0x1b, 0xbe, 0x2e, 0x8c,
					0x88, 0x12, 0x9a, 0x50, 0x3f, 0x66, 0xca, 0x7b, 0x30, 0x29, 0x53, 0x8d, 0x90, 0x8b, 0x7a, 0xd1,
				},
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := Decode(tt.args.r)
			if (err != nil) != tt.wantErr {
				t.Errorf("Decode() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(tt.want, got); report != "" {
				t.Errorf("Decode() = \n%s", report)
			}
		})
	}
}
