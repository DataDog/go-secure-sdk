package hashutil

import (
	"crypto"
	"io/fs"
	"os"
	"testing"
	"testing/fstest"

	"github.com/google/go-cmp/cmp"
)

func TestFileHash(t *testing.T) {
	t.Parallel()

	type args struct {
		root fs.FS
		name string
		hf   crypto.Hash
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "root nil",
			args: args{
				root: nil,
			},
			wantErr: true,
		},
		{
			name: "open error",
			args: args{
				root: &fstest.MapFS{},
				name: "not-existent-file",
				hf:   crypto.SHA256,
			},
			wantErr: true,
		},
		{
			name: "nil file handle",
			args: args{
				root: &fstest.MapFS{
					"nil": nil,
				},
				name: "nil",
				hf:   crypto.SHA256,
			},
			wantErr: true,
		},
		{
			name: "file not acceptable",
			args: args{
				root: &fstest.MapFS{
					"dev/null": &fstest.MapFile{
						Mode: fs.ModeDevice,
					},
				},
				name: "dev/null",
				hf:   crypto.SHA256,
			},
			wantErr: true,
		},
		{
			name: "hasher not available",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hf:   crypto.Hash(1000),
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "valid - sha256",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hf:   crypto.SHA256,
			},
			want: []byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
			},
		},
		{
			name: "valid - sha384",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hf:   crypto.SHA384,
			},
			want: []byte{
				0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38, 0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
				0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43, 0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
				0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb, 0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b,
			},
		},
		{
			name: "valid - sha512",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hf:   crypto.SHA512,
			},
			want: []byte{
				0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
				0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
				0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
				0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := FileHash(tt.args.root, tt.args.name, tt.args.hf)
			if (err != nil) != tt.wantErr {
				t.Errorf("FileHash() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(tt.want, got); report != "" {
				t.Errorf("FileHash() = \n%s", report)
			}
		})
	}
}

func TestFileHashes(t *testing.T) {
	t.Parallel()

	type args struct {
		root fs.FS
		name string
		hbs  []crypto.Hash
	}
	tests := []struct {
		name    string
		args    args
		want    map[crypto.Hash][]byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "root nil",
			args: args{
				root: nil,
			},
			wantErr: true,
		},
		{
			name: "open error",
			args: args{
				root: &fstest.MapFS{},
				name: "not-existent-file",
				hbs:  []crypto.Hash{crypto.SHA256, crypto.SHA384, crypto.SHA512},
			},
			wantErr: true,
		},
		{
			name: "nil file handle",
			args: args{
				root: &fstest.MapFS{
					"nil": nil,
				},
				name: "nil",
				hbs:  []crypto.Hash{crypto.SHA256, crypto.SHA384, crypto.SHA512},
			},
			wantErr: true,
		},
		{
			name: "file not acceptable",
			args: args{
				root: &fstest.MapFS{
					"dev/null": &fstest.MapFile{
						Mode: fs.ModeDevice,
					},
				},
				name: "dev/null",
				hbs:  []crypto.Hash{crypto.SHA256, crypto.SHA384, crypto.SHA512},
			},
			wantErr: true,
		},
		{
			name: "hasher not available",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hbs:  []crypto.Hash{crypto.Hash(1000)},
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "large",
			args: args{
				root: os.DirFS("./testdata"),
				name: "5.txt",
				hbs:  []crypto.Hash{crypto.SHA256, crypto.SHA384, crypto.SHA512},
			},
			want: map[crypto.Hash][]byte{
				crypto.SHA256: {
					0xcd, 0xc7, 0x6e, 0x5c, 0x99, 0x14, 0xfb, 0x92, 0x81, 0xa1, 0xc7, 0xe2, 0x84, 0xd7, 0x3e, 0x67,
					0xf1, 0x80, 0x9a, 0x48, 0xa4, 0x97, 0x20, 0x0e, 0x04, 0x6d, 0x39, 0xcc, 0xc7, 0x11, 0x2c, 0xd0,
				},
				crypto.SHA384: {
					0x9d, 0x0e, 0x18, 0x09, 0x71, 0x64, 0x74, 0xcb, 0x08, 0x6e, 0x83, 0x4e, 0x31, 0x0a, 0x4a, 0x1c,
					0xed, 0x14, 0x9e, 0x9c, 0x00, 0xf2, 0x48, 0x52, 0x79, 0x72, 0xce, 0xc5, 0x70, 0x4c, 0x2a, 0x5b,
					0x07, 0xb8, 0xb3, 0xdc, 0x38, 0xec, 0xc4, 0xeb, 0xae, 0x97, 0xdd, 0xd8, 0x7f, 0x3d, 0x89, 0x85,
				},
				crypto.SHA512: {
					0xe7, 0x18, 0x48, 0x3d, 0x0c, 0xe7, 0x69, 0x64, 0x4e, 0x2e, 0x42, 0xc7, 0xbc, 0x15, 0xb4, 0x63,
					0x8e, 0x1f, 0x98, 0xb1, 0x3b, 0x20, 0x44, 0x28, 0x56, 0x32, 0xa8, 0x03, 0xaf, 0xa9, 0x73, 0xeb,
					0xde, 0x0f, 0xf2, 0x44, 0x87, 0x7e, 0xa6, 0x0a, 0x4c, 0xb0, 0x43, 0x2c, 0xe5, 0x77, 0xc3, 0x1b,
					0xeb, 0x00, 0x9c, 0x5c, 0x2c, 0x49, 0xaa, 0x2e, 0x4e, 0xad, 0xb2, 0x17, 0xad, 0x8c, 0xc0, 0x9b,
				},
			},
		},
		{
			name: "valid",
			args: args{
				root: fstest.MapFS{
					"test.txt": &fstest.MapFile{
						Data: []byte(""),
					},
				},
				name: "test.txt",
				hbs:  []crypto.Hash{crypto.SHA256, crypto.SHA384, crypto.SHA512},
			},
			want: map[crypto.Hash][]byte{
				crypto.SHA256: {
					0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
					0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				},
				crypto.SHA384: {
					0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38, 0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
					0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43, 0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
					0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb, 0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b,
				},
				crypto.SHA512: {
					0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
					0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
					0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
					0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e,
				},
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := FileHashes(tt.args.root, tt.args.name, tt.args.hbs...)
			if (err != nil) != tt.wantErr {
				t.Errorf("FileHashes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(tt.want, got); report != "" {
				t.Errorf("FileHashes() = \n%s", report)
			}
		})
	}
}
