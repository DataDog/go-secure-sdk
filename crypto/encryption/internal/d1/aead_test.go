package d1

import (
	"crypto/rand"
	"errors"
	"io"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/require"
)

var _ io.Reader = (*fakeReader)(nil)

type fakeReader struct{}

func (fr *fakeReader) Read(p []byte) (n int, err error) {
	return 0, errors.New("error")
}

func Test_encrypt(t *testing.T) {
	t.Parallel()

	type args struct {
		r         io.Reader
		key       []byte
		plaintext []byte
		aad       []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "key too short",
			args: args{
				r:   rand.Reader,
				key: []byte{},
			},
			wantErr: true,
		},
		{
			name: "reader error",
			args: args{
				r:   &fakeReader{},
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "valid",
			args: args{
				r:         strings.NewReader("deterministic-nonce-entropy-source"), // Deterministic random source
				key:       []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				plaintext: []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`),
			},
			wantErr: false,
			want: []byte{
				0xd1, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x6e, //  |.deterministic-n|
				0x6f, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x9d, 0x7f, 0xc1, 0x7a, 0x6c, 0x84, 0x8f, //  |once-entr...zl..|
				0x54, 0x9f, 0xfd, 0x1d, 0xf6, 0x35, 0xaa, 0xbe, 0xc5, 0xcf, 0x6f, 0x1c, 0xb1, 0x13, 0x28, 0xa4, //  |T....5....o...(.|
				0xd2, 0x7a, 0xe3, 0xbe, 0x96, 0xcc, 0xad, 0xf3, 0xb4, 0x6c, 0xad, 0xd8, 0xb0, 0x04, 0x90, 0x4b, //  |.z.......l.....K|
				0x7f, 0x4e, 0xfe, 0xba, 0x41, 0x64, 0x78, 0x49, 0xe2, 0x77, 0x35, 0xc3, 0x8c, 0x27, 0xa8, 0x94, //  |.N..AdxI.w5..'..|
				0x9a, 0xcb, 0x68, 0xc2, 0x28, 0x84, 0xbc, 0x05, 0x44, 0x4c, 0xe9, 0x61, 0xb5, 0xe3, 0x83, 0xb1, //  |..h.(...DL.a....|
				0x6c, 0x16, 0x98, 0x75, 0x9e, //  |l..u.|
			},
		},
		{
			name: "valid with aad",
			args: args{
				r:         strings.NewReader("deterministic-nonce-entropy-source"), // Deterministic random source
				key:       []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				plaintext: []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`),
				aad:       []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			wantErr: false,
			want: []byte{
				0xd1, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x6e, //  |.deterministic-n|
				0x6f, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x9d, 0x7f, 0xc1, 0x7a, 0x6c, 0x84, 0x8f, // -|once-entr...zl..|
				0x54, 0x9f, 0xfd, 0x1d, 0xf6, 0x35, 0xaa, 0xbe, 0xc5, 0xcf, 0x6f, 0x1c, 0xb1, 0x13, 0x28, 0xa4, // -|T....5....o...(.|
				0xd2, 0x7a, 0xe3, 0xbe, 0x96, 0xcc, 0xad, 0xf3, 0xb4, 0x6c, 0xad, 0xd8, 0xb0, 0x04, 0x90, 0x4b, // -|.z.......l.....K|
				0x7f, 0x4e, 0xfe, 0xba, 0x41, 0xd0, 0x8e, 0x9f, 0x38, 0x7c, 0xbf, 0xc7, 0x57, 0x3f, 0x9c, 0x67, // -|.N..A...8|..W?.g|
				0x8e, 0x2f, 0x03, 0xea, 0x57, 0x51, 0x27, 0xdd, 0x7a, 0xd9, 0xe0, 0x36, 0xe6, 0x0c, 0x4c, 0xce, // -|./..WQ'.z..6..L.|
				0xa2, 0xa3, 0x26, 0x96, 0x91, // -|..&..|
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := encrypt(tt.args.r, tt.args.key, tt.args.plaintext, tt.args.aad)
			if (err != nil) != tt.wantErr {
				t.Errorf("encrypt() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(got, tt.want); report != "" {
				t.Errorf("encrypt() = \n%s", report)
			}
		})
	}
}

func Test_decrypt(t *testing.T) {
	t.Parallel()

	type args struct {
		key        []byte
		ciphertext []byte
		aad        []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "key too short",
			args: args{
				key: []byte(""),
			},
			wantErr: true,
		},
		{
			name: "ciphertext too short",
			args: args{
				key:        []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{},
			},
			wantErr: true,
		},
		{
			name: "invalid version",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xFF,                                                                                           // Version
					0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d, 0x72, // Nonce
					0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d,
					0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f, 0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, // Ciphertext
					0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0, 0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e,
					0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21, 0x3d, 0x34, 0x3a, 0x13, 0x0f,
					0x20, 0x18, 0x52, 0xcc, 0x3c, 0x94, 0xff, 0x2c, 0x49, 0x41, 0xd8, 0x14, 0x3e, 0x42, 0x55, 0x8d, // Authentication Tag
					0xb1, 0x18, 0x1f, 0xec, 0x79, 0x5c, 0x62, 0x09, 0x34, 0x84, 0x8f, 0x50, 0x5c, 0xed, 0xc5, 0x62,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered nonce",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1,                                                                                           // Version
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // Nonce
					0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d,
					0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f, 0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, // Ciphertext
					0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0, 0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e,
					0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21, 0x3d, 0x34, 0x3a, 0x13, 0x0f,
					0x20, 0x18, 0x52, 0xcc, 0x3c, 0x94, 0xff, 0x2c, 0x49, 0x41, 0xd8, 0x14, 0x3e, 0x42, 0x55, 0x8d, // Authentication Tag
					0xb1, 0x18, 0x1f, 0xec, 0x79, 0x5c, 0x62, 0x09, 0x34, 0x84, 0x8f, 0x50, 0x5c, 0xed, 0xc5, 0x62,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered ciphertext",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1,                                                                                           // Version
					0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d, 0x72, // Nonce
					0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d,
					0xff, 0xff, 0xff, 0xff, 0x81, 0x12, 0x2f, 0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, // Ciphertext
					0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0, 0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e,
					0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21, 0x3d, 0x34, 0x3a, 0x13, 0x0f,
					0x9b, 0xf3, 0x5a, 0x1e, 0xaf, 0x18, 0x3f, 0x4c, 0x42, 0x51, 0xba, 0xad, 0xbf, 0x10, 0x2a, 0x23, // Authentication Tag
					0x98, 0xb7, 0x44, 0x1c, 0xa0, 0x99, 0x15, 0xc6, 0x14, 0xed, 0xe1, 0x8e, 0x4f, 0xfd, 0x83, 0x8f,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered auth tag",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1,                                                                                           // Version
					0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d, 0x72, // Nonce
					0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d,
					0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f, 0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, // Ciphertext
					0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0, 0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e,
					0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21, 0x3d, 0x34, 0x3a, 0x13, 0x0f,
					0xff, 0xff, 0xff, 0xff, 0xaf, 0x18, 0x3f, 0x4c, 0x42, 0x51, 0xba, 0xad, 0xbf, 0x10, 0x2a, 0x23, // Authentication Tag
					0x98, 0xb7, 0x44, 0x1c, 0xa0, 0x99, 0x15, 0xc6, 0x14, 0xed, 0xe1, 0x8e, 0x4f, 0xfd, 0x83, 0x8f,
				},
			},
			wantErr: true,
		},
		{
			name: "aad mismatch",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1,                                                                                           // Version
					0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d, 0x72, // Nonce
					0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d,
					0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f, 0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, // Ciphertext
					0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0, 0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e,
					0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21, 0x3d, 0x34, 0x3a, 0x13, 0x0f,
					0x9b, 0xf3, 0x5a, 0x1e, 0xaf, 0x18, 0x3f, 0x4c, 0x42, 0x51, 0xba, 0xad, 0xbf, 0x10, 0x2a, 0x23, // Authentication Tag
					0x98, 0xb7, 0x44, 0x1c, 0xa0, 0x99, 0x15, 0xc6, 0x14, 0xed, 0xe1, 0x8e, 0x4f, 0xfd, 0x83, 0x8f,
				},
				aad: []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "valid",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d,
					0x72, 0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d, 0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f,
					0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, 0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0,
					0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e, 0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21,
					0x3d, 0x34, 0x3a, 0x13, 0x0f, 0x9b, 0xf3, 0x5a, 0x1e, 0xaf, 0x18, 0x3f, 0x4c, 0x42, 0x51, 0xba,
					0xad, 0xbf, 0x10, 0x2a, 0x23, 0x98, 0xb7, 0x44, 0x1c, 0xa0, 0x99, 0x15, 0xc6, 0x14, 0xed, 0xe1,
					0x8e, 0x4f, 0xfd, 0x83, 0x8f,
				},
			},
			want: []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`),
		},
		{
			name: "valid with aad",
			args: args{
				key: []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB"),
				ciphertext: []byte{
					0xD1, 0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d,
					0x72, 0x95, 0x66, 0xc7, 0x4d, 0x10, 0x03, 0x7c, 0x4d, 0xc4, 0x6b, 0x21, 0x87, 0x81, 0x12, 0x2f,
					0x03, 0x83, 0x58, 0x2d, 0x3b, 0xd6, 0xd8, 0x0b, 0x24, 0xb1, 0xc2, 0x5b, 0xbc, 0x56, 0xda, 0xd0,
					0xe3, 0x88, 0x92, 0x14, 0xfc, 0x06, 0xfd, 0xc8, 0x2e, 0x20, 0xf6, 0xd9, 0xba, 0x8e, 0xac, 0x21,
					0x3d, 0x34, 0x3a, 0x13, 0x0f, 0x20, 0x18, 0x52, 0xcc, 0x3c, 0x94, 0xff, 0x2c, 0x49, 0x41, 0xd8,
					0x14, 0x3e, 0x42, 0x55, 0x8d, 0xb1, 0x18, 0x1f, 0xec, 0x79, 0x5c, 0x62, 0x09, 0x34, 0x84, 0x8f,
					0x50, 0x5c, 0xed, 0xc5, 0x62,
				},
				aad: []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			want: []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`),
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := decrypt(tt.args.key, tt.args.ciphertext, tt.args.aad)
			if (err != nil) != tt.wantErr {
				t.Errorf("decrypt() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(got, tt.want); report != "" {
				t.Errorf("decrypt() = \n%s", report)
			}
		})
	}
}

func TestEncryptAndDecrypt(t *testing.T) {
	t.Parallel()

	key := []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB")
	msg := []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`)

	ciphertext, err := Encrypt(key, msg)
	require.NoError(t, err)
	require.Len(t, ciphertext, len(msg)+Overhead())

	out, err := Decrypt(key, ciphertext)
	require.NoError(t, err)
	require.Equal(t, msg, out)
}

func TestEncryptAndDecrypt_WithAdditionnalData(t *testing.T) {
	t.Parallel()

	key := []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB")
	msg := []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`)
	aad := []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`)

	ciphertext, err := EncryptWithAdditionalData(key, msg, aad)
	require.NoError(t, err)

	out, err := DecryptWithAdditionalData(key, ciphertext, aad)
	require.NoError(t, err)
	require.Equal(t, msg, out)
}

//nolint:errcheck
func BenchmarkEncrypt(b *testing.B) {
	key := []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB")
	msg := []byte(`{"state":"gInhnZvpFdKJ2pg7gwPeVuKFZJMNUNNo"}`)

	b.ReportAllocs()
	b.ResetTimer()
	b.SetBytes(int64(len(msg)))

	for i := 0; i < b.N; i++ {
		Encrypt(key, msg)
	}
}

//nolint:errcheck
func BenchmarkDecrypt(b *testing.B) {
	key := []byte("sQU8SWrSiaz0eewSS9INE1gDGv1nULsB")
	aad := []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`)
	msg := []byte{
		0xd1, 0xc2, 0x1f, 0xee, 0x1f, 0x6d, 0x21, 0xa8, 0x9e, 0xfc, 0xbf, 0xa7, 0x94, 0x3e, 0xa, 0x5a,
		0x37, 0x6f, 0xab, 0x60, 0xd9, 0xbc, 0xc6, 0x3e, 0xb9, 0x96, 0xfa, 0x26, 0xe, 0x24, 0xa6, 0x5e,
		0x83, 0x25, 0x3d, 0x79, 0x44, 0x1c, 0x67, 0xee, 0xb4, 0xad, 0xff, 0xe, 0xef, 0x9, 0x7e, 0x1a,
		0x3a, 0xb9, 0xbf, 0x51, 0xfd, 0x7e, 0x24, 0xd7, 0x41, 0xbe, 0x64, 0xfa, 0xb8, 0x72, 0x24, 0xb8,
		0x7b, 0x66, 0xca, 0x1f, 0x6d, 0x83, 0x17, 0x39, 0xd, 0x3c, 0xf6, 0x20, 0x81, 0x3d, 0xda, 0xa4,
		0x20, 0x7e, 0xde, 0x43, 0x1d, 0x50, 0x17, 0xa8, 0x2d, 0xa0, 0xbd, 0x72, 0xae, 0x88, 0x51, 0x58,
		0x94, 0xee, 0xeb, 0xbe, 0xd9,
	}

	b.ReportAllocs()
	b.ResetTimer()
	b.SetBytes(int64(len(msg)))

	for i := 0; i < b.N; i++ {
		DecryptWithAdditionalData(key, msg, aad)
	}
}
