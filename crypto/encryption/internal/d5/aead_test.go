package d5

import (
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/stretchr/testify/require"
)

func Test_encrypt(t *testing.T) {
	t.Parallel()

	type args struct {
		key       []byte
		plaintext []byte
		aad       []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "key too short",
			args: args{
				key: []byte{},
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "valid",
			args: args{
				key:       []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				plaintext: []byte(`firstname.lastname@company.com`),
			},
			wantErr: false,
			want: []byte{
				0xd5, 0xdb, 0x68, 0x69, 0x75, 0xc4, 0x08, 0x34, 0x6f, 0xb3, 0x32, 0x86, 0x4e, 0x75, 0xd6, 0xa6,
				0xf8, 0xa9, 0x61, 0x35, 0x20, 0x4b, 0x7e, 0xaf, 0x29, 0xa5, 0x83, 0x4a, 0x47, 0x09, 0xad, 0x87,
				0x20, 0x17, 0x73, 0x3d, 0x46, 0x1e, 0x5b, 0x33, 0x6b, 0x4f, 0x68, 0x10, 0xb7, 0xdd, 0x6b, 0x3f,
				0x5f, 0xd8, 0x06, 0x02, 0xa7, 0xc6, 0x90, 0xbb, 0x14, 0xe0, 0xbd,
			},
		},
		{
			name: "valid with aad",
			args: args{
				key:       []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				plaintext: []byte(`firstname.lastname@company.com`),
				aad:       []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			wantErr: false,
			want: []byte{
				0xd5, 0xdb, 0x68, 0x69, 0x75, 0xc4, 0x08, 0x34, 0x6f, 0xb3, 0x32, 0x86, 0x4e, 0x75, 0xd6, 0xa6,
				0xf8, 0xa9, 0x61, 0x35, 0x20, 0x4b, 0x7e, 0xaf, 0x29, 0xa5, 0x83, 0x4a, 0x47, 0x09, 0xad, 0x87,
				0x20, 0x17, 0x73, 0x3d, 0x46, 0x1e, 0x5b, 0x33, 0x6b, 0x4f, 0x68, 0xb0, 0xe7, 0x29, 0xbb, 0xb1,
				0xea, 0xba, 0x80, 0x80, 0x9f, 0xe3, 0xc1, 0x02, 0x62, 0x75, 0x73,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := encrypt(tt.args.key, tt.args.plaintext, tt.args.aad)
			if (err != nil) != tt.wantErr {
				t.Errorf("encrypt() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(tt.want, got); report != "" {
				t.Errorf("encrypt() = \n%s", report)
			}
		})
	}
}

func Test_decrypt(t *testing.T) {
	t.Parallel()

	type args struct {
		key        []byte
		ciphertext []byte
		aad        []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name:    "nil",
			wantErr: true,
		},
		{
			name: "key too short",
			args: args{
				key: []byte(""),
			},
			wantErr: true,
		},
		{
			name: "ciphertext too short",
			args: args{
				key:        []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{},
			},
			wantErr: true,
		},
		{
			name: "invalid version",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xFF, 0xcb, 0xbf, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0x7f, 0x46, 0x4b,
					0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
					0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe8, 0xbf, 0x7e, 0xf3, 0xea,
					0x93, 0x66, 0x17, 0xa5, 0xc3, 0x7c, 0x07, 0x81, 0x61, 0x20, 0xba,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered nonce",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xFF, 0xFF, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0x7f, 0x46, 0x4b,
					0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
					0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe8, 0xbf, 0x7e, 0xf3, 0xea,
					0x93, 0x66, 0x17, 0xa5, 0xc3, 0x7c, 0x07, 0x81, 0x61, 0x20, 0xba,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered ciphertext",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xcb, 0xbf, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0xff, 0xff, 0x4b,
					0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
					0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe8, 0xbf, 0x7e, 0xf3, 0xea,
					0x93, 0x66, 0x17, 0xa5, 0xc3, 0x7c, 0x07, 0x81, 0x61, 0x20, 0xba,
				},
			},
			wantErr: true,
		},
		{
			name: "tampered auth tag",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xcb, 0xbf, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0x7f, 0x46, 0x4b,
					0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
					0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe8, 0xbf, 0x7e, 0xf3, 0xea,
					0x93, 0x66, 0x17, 0xa5, 0xc3, 0x7c, 0x07, 0x81, 0x61, 0xff, 0xff,
				},
			},
			wantErr: true,
		},
		{
			name: "aad mismatch",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xcb, 0xbf, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0x7f, 0x46, 0x4b,
					0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
					0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe8, 0xbf, 0x7e, 0xf3, 0xea,
					0x93, 0x66, 0x17, 0xa5, 0xc3, 0x7c, 0x07, 0x81, 0x61, 0x20, 0xba,
				},
				aad: []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			wantErr: true,
		},
		// ---------------------------------------------------------------------
		{
			name: "valid",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xdb, 0x68, 0x69, 0x75, 0xc4, 0x08, 0x34, 0x6f, 0xb3, 0x32, 0x86, 0x4e, 0x75, 0xd6, 0xa6,
					0xf8, 0xa9, 0x61, 0x35, 0x20, 0x4b, 0x7e, 0xaf, 0x29, 0xa5, 0x83, 0x4a, 0x47, 0x09, 0xad, 0x87,
					0x20, 0x17, 0x73, 0x3d, 0x46, 0x1e, 0x5b, 0x33, 0x6b, 0x4f, 0x68, 0x10, 0xb7, 0xdd, 0x6b, 0x3f,
					0x5f, 0xd8, 0x06, 0x02, 0xa7, 0xc6, 0x90, 0xbb, 0x14, 0xe0, 0xbd,
				},
			},
			want: []byte(`firstname.lastname@company.com`),
		},
		{
			name: "valid with aad",
			args: args{
				key: []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1"),
				ciphertext: []byte{
					0xd5, 0xdb, 0x68, 0x69, 0x75, 0xc4, 0x08, 0x34, 0x6f, 0xb3, 0x32, 0x86, 0x4e, 0x75, 0xd6, 0xa6,
					0xf8, 0xa9, 0x61, 0x35, 0x20, 0x4b, 0x7e, 0xaf, 0x29, 0xa5, 0x83, 0x4a, 0x47, 0x09, 0xad, 0x87,
					0x20, 0x17, 0x73, 0x3d, 0x46, 0x1e, 0x5b, 0x33, 0x6b, 0x4f, 0x68, 0xb0, 0xe7, 0x29, 0xbb, 0xb1,
					0xea, 0xba, 0x80, 0x80, 0x9f, 0xe3, 0xc1, 0x02, 0x62, 0x75, 0x73,
				},
				aad: []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`),
			},
			want: []byte(`firstname.lastname@company.com`),
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			got, err := decrypt(tt.args.key, tt.args.ciphertext, tt.args.aad)
			if (err != nil) != tt.wantErr {
				t.Errorf("decrypt() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if report := cmp.Diff(got, tt.want); report != "" {
				t.Errorf("decrypt() = \n%s", report)
			}
		})
	}
}

func TestEncryptAndDecrypt(t *testing.T) {
	t.Parallel()

	key := []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1")
	msg := []byte(`firstname.lastname@company.com`)

	ciphertext, err := Encrypt(key, msg)
	require.NoError(t, err)
	require.Len(t, ciphertext, len(msg)+Overhead())

	out, err := Decrypt(key, ciphertext)
	require.NoError(t, err)
	require.Equal(t, msg, out)
}

func TestEncryptAndDecrypt_WithAdditionnalData(t *testing.T) {
	t.Parallel()

	key := []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1")
	msg := []byte(`firstname.lastname@company.com`)
	aad := []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`)

	ciphertext, err := EncryptWithAdditionalData(key, msg, aad)
	require.NoError(t, err)

	out, err := DecryptWithAdditionalData(key, ciphertext, aad)
	require.NoError(t, err)
	require.Equal(t, msg, out)
}

func BenchmarkEncrypt(b *testing.B) {
	key := []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1")
	msg := []byte(`firstname.lastname@company.com`)

	b.ReportAllocs()
	b.ResetTimer()
	b.SetBytes(int64(len(msg)))

	for i := 0; i < b.N; i++ {
		_, err := Encrypt(key, msg)
		require.NoError(b, err)
	}
}

func BenchmarkDecrypt(b *testing.B) {
	key := []byte("zzTPjjOhqexyMKXAxbelXOZI2lW7VM79kQXEWRPkvMnaWzlJbN1prxEk02huCpD1")
	aad := []byte(`{"uid":"8f41b712-663f-48a8-b43c-54cf97a94d1a"}`)
	msg := []byte{
		0xd5, 0xcb, 0xbf, 0xb8, 0xfd, 0xc8, 0x65, 0x9f, 0x57, 0xfe, 0x5f, 0xac, 0xc8, 0x7f, 0x46, 0x4b,
		0xd0, 0x08, 0x2a, 0x97, 0x04, 0xd4, 0x11, 0xcd, 0xac, 0x4f, 0x35, 0xff, 0xc0, 0xe4, 0xae, 0xd2,
		0x89, 0xec, 0xb6, 0xfa, 0x8a, 0xa2, 0x89, 0x91, 0x19, 0xa0, 0x67, 0xe3, 0xe7, 0x32, 0xb3, 0x55,
		0x4a, 0xa5, 0x79, 0x08, 0xb7, 0x42, 0xcf, 0x28, 0x96, 0x26, 0x0e,
	}

	b.ReportAllocs()
	b.ResetTimer()
	b.SetBytes(int64(len(msg)))

	for i := 0; i < b.N; i++ {
		_, err := DecryptWithAdditionalData(key, msg, aad)
		require.NoError(b, err)
	}
}
