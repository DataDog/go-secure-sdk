// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DataDog/go-secure-sdk/kms (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	crypto "crypto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	kms "github.com/DataDog/go-secure-sdk/kms"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockService) Decrypt(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockServiceMockRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockService)(nil).Decrypt), arg0, arg1)
}

// Encrypt mocks base method.
func (m *MockService) Encrypt(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockServiceMockRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockService)(nil).Encrypt), arg0, arg1)
}

// ExportKey mocks base method.
func (m *MockService) ExportKey(arg0 context.Context) (kms.KeyType, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportKey", arg0)
	ret0, _ := ret[0].(kms.KeyType)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportKey indicates an expected call of ExportKey.
func (mr *MockServiceMockRecorder) ExportKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportKey", reflect.TypeOf((*MockService)(nil).ExportKey), arg0)
}

// PublicKey mocks base method.
func (m *MockService) PublicKey(arg0 context.Context) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey", arg0)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockServiceMockRecorder) PublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockService)(nil).PublicKey), arg0)
}

// RotateKey mocks base method.
func (m *MockService) RotateKey(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateKey indicates an expected call of RotateKey.
func (mr *MockServiceMockRecorder) RotateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateKey", reflect.TypeOf((*MockService)(nil).RotateKey), arg0)
}

// Sign mocks base method.
func (m *MockService) Sign(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockServiceMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockService)(nil).Sign), arg0, arg1)
}

// VerificationPublicKeys mocks base method.
func (m *MockService) VerificationPublicKeys(arg0 context.Context) ([]crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationPublicKeys", arg0)
	ret0, _ := ret[0].([]crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificationPublicKeys indicates an expected call of VerificationPublicKeys.
func (mr *MockServiceMockRecorder) VerificationPublicKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationPublicKeys", reflect.TypeOf((*MockService)(nil).VerificationPublicKeys), arg0)
}

// Verify mocks base method.
func (m *MockService) Verify(arg0 context.Context, arg1, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockServiceMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockService)(nil).Verify), arg0, arg1, arg2)
}
