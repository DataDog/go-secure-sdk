// SPDX-FileCopyrightText: 2023-present Datadog, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DataDog/go-secure-sdk/net/httpclient (interfaces: Authorizer)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// IsNetworkAddressAuthorized mocks base method.
func (m *MockAuthorizer) IsNetworkAddressAuthorized(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNetworkAddressAuthorized", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNetworkAddressAuthorized indicates an expected call of IsNetworkAddressAuthorized.
func (mr *MockAuthorizerMockRecorder) IsNetworkAddressAuthorized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNetworkAddressAuthorized", reflect.TypeOf((*MockAuthorizer)(nil).IsNetworkAddressAuthorized), arg0, arg1)
}

// IsRequestAuthorized mocks base method.
func (m *MockAuthorizer) IsRequestAuthorized(arg0 *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRequestAuthorized", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRequestAuthorized indicates an expected call of IsRequestAuthorized.
func (mr *MockAuthorizerMockRecorder) IsRequestAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRequestAuthorized", reflect.TypeOf((*MockAuthorizer)(nil).IsRequestAuthorized), arg0)
}

// IsResponseAuthorized mocks base method.
func (m *MockAuthorizer) IsResponseAuthorized(arg0 *http.Response) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsResponseAuthorized", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsResponseAuthorized indicates an expected call of IsResponseAuthorized.
func (mr *MockAuthorizerMockRecorder) IsResponseAuthorized(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsResponseAuthorized", reflect.TypeOf((*MockAuthorizer)(nil).IsResponseAuthorized), arg0)
}
